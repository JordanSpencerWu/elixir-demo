defmodule Homework.Merchants.Merchant do
  @moduledoc """
  Ecto schema for Merchant
  """

  use Ecto.Schema
  import Ecto.Changeset

  @type t :: %__MODULE__{
          __meta__: Ecto.Schema.Metadata.t(),
          id: Ecto.UUID.t(),
          description: String.t(),
          name: String.t(),
          inserted_at: NaiveDateTime.t(),
          updated_at: NaiveDateTime.t()
        }

  @autogenerated_fields ~w(id inserted_at updated_at)a
  @required_fields ~w(description name)a

  @primary_key {:id, :binary_id, autogenerate: true}
  schema "merchants" do
    field(:description, :string)
    field(:name, :string)

    timestamps()
  end

  @doc false
  @spec changeset(t, map) :: Ecto.Changeset.t()
  def changeset(merchant, attrs) do
    merchant
    |> cast(attrs, all_fields() -- @autogenerated_fields)
    |> validate_required(@required_fields)
  end

  @spec all_fields :: list(atom)
  defp all_fields, do: __MODULE__.__schema__(:fields)
end
